#A* 8puzzle

from queue import PriorityQueue

# The 8-Puzzle game state class
class PuzzleState:
    def __init__(self, board, parent=None, move=""):
        self.board = board
        self.parent = parent
        self.move = move
        self.g = 0
        self.h = 0

    def __lt__(self, other):
        return (self.g + self.h) < (other.g + other.h)

    def is_goal(self):
        goal_state = [[1, 2, 3],
                      [4, 5, 6],
                      [7, 8, 0]]
        return self.board == goal_state

    def generate_successors(self):
        successors = []
        i, j = self.find_blank()

        # Generate all possible moves by swapping the blank space with its neighboring tiles
        for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:
            if 0 <= x < 3 and 0 <= y < 3:
                new_board = [row[:] for row in self.board]
                new_board[i][j], new_board[x][y] = new_board[x][y], new_board[i][j]
                successors.append(PuzzleState(new_board, self, self.board[x][y]))

        return successors

    def find_blank(self):
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == 0:
                    return i, j

    def calculate_heuristic(self):
        # Calculate the Manhattan distance heuristic
        total_distance = 0
        for i in range(3):
            for j in range(3):
                value = self.board[i][j]
                if value != 0:
                    target_row = (value - 1) // 3
                    target_col = (value - 1) % 3
                    distance = abs(i - target_row) + abs(j - target_col)
                    total_distance += distance
        self.h = total_distance

    def reconstruct_path(self):
        path = []
        current_state = self
        while current_state.parent is not None:
            path.append(current_state.move)
            current_state = current_state.parent
        path.reverse()
        return path


def a_star_search(initial_state):
    open_list = PriorityQueue()
    open_list.put(initial_state)

    while not open_list.empty():
        current_state = open_list.get()

        if current_state.is_goal():
            return current_state.reconstruct_path()

        successors = current_state.generate_successors()

        for successor in successors:
            successor.g = current_state.g + 1
            successor.calculate_heuristic()

            open_list.put(successor)

    return None  # No solution found


# Example usage
initial_board = [[1, 2, 3],
                 [4, 5, 6],
                 [0, 7, 8]]

initial_state = PuzzleState(initial_board)

solution = a_star_search(initial_state)

if solution is not None:
    print("Solution found!")
    print(solution)
else:
    print("No solution found.")
