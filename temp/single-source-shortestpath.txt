#single source shortest path

import sys

def dijkstra(graph, start):
    num_vertices = len(graph)
    distances = [sys.maxsize] * num_vertices   # To store the shortest distance from the start node to each vertex
    distances[start] = 0   # Distance from start node to itself is 0
    visited = [False] * num_vertices   # To keep track of visited vertices
    
    for _ in range(num_vertices):
        # Find the vertex with the minimum distance from the start node among the unvisited vertices
        min_dist = sys.maxsize
        min_vertex = -1
        for v in range(num_vertices):
            if not visited[v] and distances[v] < min_dist:
                min_dist = distances[v]
                min_vertex = v
        
        if min_vertex == -1:
            break
        
        visited[min_vertex] = True   # Mark the vertex as visited
        
        # Update the distances of the neighboring vertices
        for v in range(num_vertices):
            if not visited[v] and graph[min_vertex][v] != 0:
                new_dist = distances[min_vertex] + graph[min_vertex][v]
                if new_dist < distances[v]:
                    distances[v] = new_dist
    
    return distances

# Example usage
graph = [
    [0, 4, 0, 0, 0, 0, 0, 8, 0],
    [4, 0, 8, 0, 0, 0, 0, 11, 0],
    [0, 8, 0, 7, 0, 4, 0, 0, 2],
    [0, 0, 7, 0, 9, 14, 0, 0, 0],
    [0, 0, 0, 9, 0, 10, 0, 0, 0],
    [0, 0, 4, 14, 10, 0, 2, 0, 0],
    [0, 0, 0, 0, 0, 2, 0, 1, 6],
    [8, 11, 0, 0, 0, 0, 1, 0, 7],
    [0, 0, 2, 0, 0, 0, 6, 7, 0]
]
start_node = 0

distances = dijkstra(graph, start_node)

# Print the shortest distances from the start node to all other vertices
for i, dist in enumerate(distances):
    print(f"Shortest distance from node {start_node} to node {i}: {dist}")
