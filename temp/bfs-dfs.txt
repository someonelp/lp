# bfs dsf

#bfs
from collections import deque

graph = {
    	'A': ['B','D'],
    	'B': ['A','C'],
    	'C': ['B'],
    	'D': ['A', 'E', 'F'],
    	'E': ['D','F','G'],
	'F': ['D','E','H'],
	'G': ['E','H'],
	'H': ['G','F']
}       

def bfs(graph, root):
    visited=set()
    queue=deque([root])
    
        
    while queue:
        vertex=queue.popleft()
        visited.add(vertex)
        print(vertex,end=" ")
        
        for i in graph[vertex]:
            if i not in visited:
                queue.append(i)
                visited.add(i)

# Driver Code
if __name__ == "__main__":

    bfs(graph,'A')






#dfs
def dfs(graph, start, visited=None):
    if visited is None:
        visited = set()
    
    visited.add(start)
    print(start, end=" ")  # Process the current vertex (in this case, we'll just print it)
    
    for neighbor in graph[start]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)

# Example graph
graph = {
    'A': ['B', 'C'],
    'B': ['A', 'D', 'E'],
    'C': ['A', 'F'],
    'D': ['B'],
    'E': ['B', 'F'],
    'F': ['C', 'E']
}

# Call the DFS function with the graph and a starting vertex
dfs(graph, 'A')

