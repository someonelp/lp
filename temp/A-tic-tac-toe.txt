#A* tic-tac-toe


from queue import PriorityQueue

# The Tic-Tac-Toe game state class
class TicTacToeState:
    def __init__(self, board, turn, parent=None, move=None):
        self.board = board
        self.turn = turn
        self.parent = parent
        self.move = move
        self.g = 0
        self.h = 0

    def __lt__(self, other):
        return (self.g + self.h) < (other.g + other.h)

    def is_terminal(self):
        # Check if the game has a winner or if the board is full
        if self.check_winner() is not None:
            return True

        for row in self.board:
            if None in row:
                return False

        return True

    def evaluate(self):
        # Evaluate the game state
        winner = self.check_winner()
        if winner == 'X':
            return 1
        elif winner == 'O':
            return -1
        else:
            return 0

    def generate_successors(self):
        # Generate all possible successor states
        successors = []

        for i in range(3):
            for j in range(3):
                if self.board[i][j] is None:
                    new_board = [row[:] for row in self.board]
                    new_board[i][j] = self.turn

                    new_turn = 'O' if self.turn == 'X' else 'X'
                    successors.append(TicTacToeState(new_board, new_turn, self, (i, j)))

        return successors

    def check_winner(self):
        # Check if there is a winner in the current state
        lines = [self.board[0], self.board[1], self.board[2],
                 [self.board[0][0], self.board[1][0], self.board[2][0]],
                 [self.board[0][1], self.board[1][1], self.board[2][1]],
                 [self.board[0][2], self.board[1][2], self.board[2][2]],
                 [self.board[0][0], self.board[1][1], self.board[2][2]],
                 [self.board[0][2], self.board[1][1], self.board[2][0]]]

        for line in lines:
            if line == ['X', 'X', 'X']:
                return 'X'
            elif line == ['O', 'O', 'O']:
                return 'O'

        return None

def a_star_search(initial_state):
    open_list = PriorityQueue()
    open_list.put(initial_state)

    while not open_list.empty():
        current_state = open_list.get()

        if current_state.is_terminal():
            return get_solution_path(current_state)

        successors = current_state.generate_successors()

        for successor in successors:
            successor.g = current_state.g + 1
            successor.h = successor.evaluate()

            open_list.put(successor)

    return None  # No solution found

def get_solution_path(state):
    path = []
    while state.parent is not None:
        path.append(state.move)
        state = state.parent
    path.reverse()
    return path

# Example usage
initial_board = [[None, None, None],
                 [None, None, None],
                 [None, None, None]]

initial_state = TicTacToeState(initial_board, 'X')

result = a_star_search(initial_state)

if result is not None:
    print
